ddns-update-style       none;
option                  domain-search           "neuronpointer.net";
option                  domain-name             "neuronpointer.net";
# No quotes on the values for domain-name-servers.
option                  domain-name-servers     {% for h in groups['dns-internal'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};
option                  ntp-servers             {% for h in groups['time-server'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};
default-lease-time      200;
max-lease-time          200;
authoritative;
log-facility            local7;

# http://www.syslinux.org/wiki/index.php?title=PXELINUX#UEFI
option                  architecture-type       code 93 = unsigned integer 16;

subnet 192.168.11.0 netmask 255.255.255.0 {
  option                broadcast-address       192.168.11.255;
  option                routers                 {% for h in groups['gateway'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};
  range                 192.168.11.10           192.168.11.50;
}


# EFI netboot
# This doesn't work yet.
group {
  option                broadcast-address       192.168.11.255;
  option                routers                 {% for h in groups['gateway'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};

  server-name           {{ groups['debian-netboot'][0] }};
  next-server           {{ hostvars[groups['debian-netboot'][0]].ip_address }};
{#
  # Aspirational:  Boot a menu or something by default.
  filename              "syslinux.efi";
#}

{% for h in groups['netinstall-efi-clients'] %}
{% if hostvars[h].mac_address is defined and hostvars[h].ip_address %}
  host netboot-{{ h }} {
    hardware ethernet   {{ hostvars[h].netboot_mac_address }};
    fixed-address       {{ h }}.{{ domain }};
    filename            "debian-installer/amd64/bootnetx64.efi";
  }

{% else %}
  # {{ h }} is not fully configured.  ip_address and mac_address are required.  See ansible inventory and host_vars.

{% endif %}
{% endfor %}
{#
  # First instruct PXE firmware to download ipxe, then instruct ipxe to download syslinux.
  #if exists user-class and option user-class = "iPXE" {
    filename            "tftp://{{ inventory_hostname }}/syslinux.efi";
  } else {
    filename            "ipxe.efi";
  }
#}
}


# legacy netboot
group {
  option                broadcast-address       192.168.11.255;
  option                routers                 {% for h in groups['gateway'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};

  server-name           {{ groups['debian-netboot'][0] }};
  next-server           {{ hostvars[groups['debian-netboot'][0]].ip_address }};
{#
  # Aspirational:  Boot a menu or something by default.
  filename              "pxelinux.0";
#}

{% for h in groups['netinstall-bios-clients'] %}
{% if hostvars[h].mac_address is defined and hostvars[h].ip_address %}
  host netboot-{{ h }} {
    hardware ethernet   {{ hostvars[h].netboot_mac_address }};
    fixed-address       {{ h }}.{{ domain }};
    filename            "debian-installer/amd64/pxelinux.0";
  }

{% else %}
  # {{ h }} is not fully configured.  ip_address and mac_address are required.  See ansible inventory and host_vars.

{% endif %}
{% endfor %}
}


# no netboot
group {
  option                broadcast-address       192.168.11.255;
  option                routers                 {% for h in groups['gateway'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};

{% for h in groups['dhcp-clients'] %}
{% if hostvars[h].mac_address is defined and hostvars[h].ip_address %}
  host {{ h }} {
    hardware ethernet   {{ hostvars[h].mac_address }};
    fixed-address       {{ h }}.{{ domain }};
  }

{% else %}
  # {{ h }} is not fully configured.  ip_address and mac_address are required.  See ansible inventory and host_vars.

{% endif %}
{% endfor %}

}
