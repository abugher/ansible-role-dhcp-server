option                  domain-search           "{{ domain }}";
option                  domain-name             "{{ domain }}";
# No quotes on the values for domain-name-servers.
option                  domain-name-servers     {% for h in groups['dns-internal'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};
option                  ntp-servers             {% for h in groups['time-server'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};
option                  routers                 {% for h in groups['gateway'] %}{{ h }}.{{ domain }}{% if not loop.last %}, {% endif %}{% endfor %};
option                  broadcast-address       192.168.11.255;
# http://www.syslinux.org/wiki/index.php?title=PXELINUX#UEFI
option                  architecture-type       code 93 = unsigned integer 16;

default-lease-time      200;
max-lease-time          200;
authoritative;
log-facility            local7;
ddns-update-style       none;

server-name             {{ groups['debian-netboot'][0] }};
next-server             {{ hostvars[groups['debian-netboot'][0]]['ip_address'] }};

if exists user-class and option user-class = "iPXE" {
  # client is iPXE - send boot menu
  filename              "menu.ipxe";
} elsif option architecture-type = 00:07 {
  # client is EFI - send iPXE
  filename              "ipxe/ipxe.efi";
  #filename              "debian-installer/amd64/bootnetx64.efi";
} else {
  # client is BIOS - send iPXE - untested
  filename              "ipxe/ipxe.lkrn";
}


# unregistered hosts get a random draw from a dedicated range
# (
subnet 192.168.11.0 netmask 255.255.255.0 {
  range                 192.168.11.10           192.168.11.50;
}


# registered DHCP clients get a fixed address and hostname
group {
{% for h in groups['dhcp-clients'] %}
{% if hostvars[h]['mac_address'] is defined and hostvars[h]['ip_address'] %}
  host dhcp-{{ h }} {
    hardware ethernet   {{ hostvars[h]['mac_address'] }};
    fixed-address       {{ h }}.{{ domain }};
  }
{% if hostvars[h]['netboot_mac_address'] is defined %}
  host netboot-{{ h }} {
    hardware ethernet   {{ hostvars[h]['netboot_mac_address'] }};
    fixed-address       {{ h }}.{{ domain }};
  }
{% endif %}

{% else %}
  # {{ h }} is not fully configured.  ip_address and mac_address are required.  See ansible inventory and host_vars.

{% endif %}
{% endfor %}
}
